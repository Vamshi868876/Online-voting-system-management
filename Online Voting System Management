{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f2e0e600-116b-4bf9-9a67-a150b74d1979",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting SpeechRecognition\n",
      "  Using cached SpeechRecognition-3.12.0-py3-none-any.whl.metadata (30 kB)\n",
      "Collecting pyttsx3\n",
      "  Using cached pyttsx3-2.98-py3-none-any.whl.metadata (3.8 kB)\n",
      "Collecting spacy\n",
      "  Using cached spacy-3.8.3-cp312-cp312-win_amd64.whl.metadata (27 kB)\n",
      "Collecting transformers\n",
      "  Using cached transformers-4.47.1-py3-none-any.whl.metadata (44 kB)\n",
      "Collecting pyjokes\n",
      "  Downloading pyjokes-0.8.3-py3-none-any.whl.metadata (3.4 kB)\n",
      "Requirement already satisfied: requests in c:\\users\\andre\\anaconda3\\lib\\site-packages (2.32.3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: Could not find a version that satisfies the requirement webbrowser (from versions: none)\n",
      "ERROR: No matching distribution found for webbrowser\n",
      "C:\\Users\\andre\\anaconda3\\python.exe: No module named spacy\n"
     ]
    },
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pyttsx3'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 4\u001b[0m\n\u001b[0;32m      2\u001b[0m get_ipython()\u001b[38;5;241m.\u001b[39msystem(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython -m spacy download en_core_web_sm\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mthreading\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpyttsx3\u001b[39;00m\n\u001b[0;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mspeech_recognition\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01msr\u001b[39;00m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mdatetime\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'pyttsx3'"
     ]
    }
   ],
   "source": [
    "!pip install SpeechRecognition pyttsx3 spacy transformers pyjokes requests webbrowser\n",
    "!python -m spacy download en_core_web_sm\n",
    "import threading\n",
    "import pyttsx3\n",
    "import speech_recognition as sr\n",
    "import datetime\n",
    "import requests\n",
    "import spacy\n",
    "from transformers import pipeline\n",
    "import pyjokes\n",
    "import webbrowser\n",
    "import smtplib\n",
    "from email.mime.text import MIMEText\n",
    "from email.mime.multipart import MIMEMultipart\n",
    "\n",
    "# Initialize spaCy NLP model\n",
    "nlp = spacy.load('en_core_web_sm')\n",
    "\n",
    "# Load the Hugging Face model for question answering\n",
    "qa_pipeline = pipeline(\"question-answering\")\n",
    "\n",
    "# Initialize text-to-speech engine\n",
    "engine = pyttsx3.init()\n",
    "engine.setProperty('rate', 150)\n",
    "engine.setProperty('volume', 1)\n",
    "\n",
    "# Function to speak text\n",
    "def speak(text):\n",
    "    print(f\"Assistant: {text}\")\n",
    "    engine.say(text)\n",
    "    engine.runAndWait()\n",
    "\n",
    "# Function to listen to user speech\n",
    "def listen():\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.Microphone() as source:\n",
    "        print(\"Listening...\")\n",
    "        recognizer.adjust_for_ambient_noise(source)  # Adjusts for background noise\n",
    "        audio = recognizer.listen(source)\n",
    "\n",
    "    try:\n",
    "        print(\"Recognizing...\")\n",
    "        query = recognizer.recognize_google(audio)\n",
    "        print(f\"You said: {query}\")\n",
    "    except sr.UnknownValueError:\n",
    "        print(\"Sorry, I couldn't understand that.\")\n",
    "        return \"\"\n",
    "    except sr.RequestError:\n",
    "        print(\"Sorry, there was an issue with the speech recognition service.\")\n",
    "        return \"\"\n",
    "    return query.lower()\n",
    "\n",
    "# Function to process the user's query\n",
    "def process_query(query):\n",
    "    if 'time' in query:\n",
    "        current_time = get_time()\n",
    "        speak(f\"The current time is {current_time}\")\n",
    "\n",
    "    elif 'open' in query:\n",
    "        speak(\"Which website would you like to open?\")\n",
    "        website = listen()\n",
    "        open_website(website)\n",
    "\n",
    "    elif 'weather' in query:\n",
    "        speak(\"Which city's weather would you like to know?\")\n",
    "        city = listen()\n",
    "        weather_info = get_weather(city)\n",
    "        speak(weather_info)\n",
    "\n",
    "    elif 'email' in query:\n",
    "        speak(\"Whom would you like to send an email to?\")\n",
    "        to_email = listen()\n",
    "        speak(\"What is the subject of the email?\")\n",
    "        subject = listen()\n",
    "        speak(\"What would you like to write in the email?\")\n",
    "        body = listen()\n",
    "        send_email(to_email, subject, body)\n",
    "\n",
    "    elif 'joke' in query:\n",
    "        tell_joke()\n",
    "\n",
    "    elif 'question' in query:\n",
    "        speak(\"Ask me a question.\")\n",
    "        question = listen()\n",
    "        answer = answer_question(question)\n",
    "        speak(f\"Answer: {answer}\")\n",
    "\n",
    "    elif 'stop' in query or 'exit' in query:\n",
    "        speak(\"Goodbye!\")\n",
    "        return False\n",
    "\n",
    "    return True\n",
    "\n",
    "# Function to get current time\n",
    "def get_time():\n",
    "    now = datetime.datetime.now()\n",
    "    current_time = now.strftime(\"%H:%M:%S\")\n",
    "    return current_time\n",
    "\n",
    "# Function to open a website\n",
    "def open_website(website):\n",
    "    webbrowser.open(f'http://{website}')\n",
    "    speak(f\"Opening {website}...\")\n",
    "\n",
    "# Function to get weather for a city\n",
    "def get_weather(city):\n",
    "    api_key = \"YOUR_API_KEY\"  # Replace with your OpenWeather API key\n",
    "    base_url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric\"\n",
    "    response = requests.get(base_url)\n",
    "    data = response.json()\n",
    "\n",
    "    if data[\"cod\"] == \"404\":\n",
    "        return \"City not found\"\n",
    "    else:\n",
    "        main = data[\"main\"]\n",
    "        weather = data[\"weather\"][0][\"description\"]\n",
    "        temperature = main[\"temp\"]\n",
    "        pressure = main[\"pressure\"]\n",
    "        humidity = main[\"humidity\"]\n",
    "        return f\"Weather in {city}: {weather}, Temperature: {temperature}Â°C, Pressure: {pressure} hPa, Humidity: {humidity}%\"\n",
    "\n",
    "# Function to send an email\n",
    "def send_email(to_email, subject, body):\n",
    "    from_email = \"your_email@example.com\"  # Replace with your email\n",
    "    password = \"your_password\"  # Replace with your email password\n",
    "    \n",
    "    msg = MIMEMultipart()\n",
    "    msg['From'] = from_email\n",
    "    msg['To'] = to_email\n",
    "    msg['Subject'] = subject\n",
    "    msg.attach(MIMEText(body, 'plain'))\n",
    "    \n",
    "    server = smtplib.SMTP('smtp.gmail.com', 587)\n",
    "    server.starttls()\n",
    "    server.login(from_email, password)\n",
    "    server.sendmail(from_email, to_email, msg.as_string())\n",
    "    server.quit()\n",
    "\n",
    "    speak(\"Email has been sent!\")\n",
    "\n",
    "# Function to tell a joke\n",
    "def tell_joke():\n",
    "    joke = pyjokes.get_joke()\n",
    "    speak(joke)\n",
    "\n",
    "# Function to answer a question\n",
    "def answer_question(query):\n",
    "    context = \"\"\"\n",
    "    Python is an interpreted high-level general-purpose programming language. Its design philosophy emphasizes code readability with its notable use of significant indentation. Python is dynamically typed and garbage-collected.\n",
    "    \"\"\"\n",
    "    result = qa_pipeline({\n",
    "        'context': context,\n",
    "        'question': query\n",
    "    })\n",
    "    return result['answer']\n",
    "\n",
    "# Function to run the assistant\n",
    "def run_assistant():\n",
    "    speak(\"Hello, I am your AI assistant. How can I assist you today?\")\n",
    "    while True:\n",
    "        query = listen()\n",
    "        if query:\n",
    "            continue_assistant = process_query(query)\n",
    "            if not continue_assistant:\n",
    "                break\n",
    "\n",
    "# Running the assistant in a separate thread\n",
    "assistant_thread = threading.Thread(target=run_assistant)\n",
    "assistant_thread.start()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d41aa569-bfbc-4f47-b7bd-22a260c43678",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
